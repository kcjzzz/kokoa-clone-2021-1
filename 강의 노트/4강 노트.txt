◆ 4.0 Transitions
4강은 조금더 심화 CSS부분

Transition은 변화를 주는 애니메이션

transition은 state에 주면 동작하지않음

예를들어,
transition: background-color 10s ease-in-out;
        (애니메이션 줄 요소)  (시간) (이부분은 추후 알려준다함)
이렇게 했을때 마우스 위에 올리면 배경색이 10초에 걸쳐서 서서히 변함
물론 hover state 효과를 준경우 동작함

모든 transition에 변화를 주고싶을떄,
transition: all; 

transition에 변화를 주려면 state가 들어가는 곳에도 똑같이 입력해줘야 동작한다.
그리고 transition이 state태그 쪽에 있어서도 안됨. 처음 태어난곳(root)에 있어야됨

◆ 4.1 Transitions part Two

ease-in function: 브라우저에게 변화하는 방법을 알려주는 역할

lenear 같은속도로 좌우 직선으로 움직임
ease-in 시작점에서 빨리지면서 움직임
ease-out 끝에서 속도가 느려짐
ease-in-out 처음엔 느리게 시작했다가 가속하고 느려지면서 끝남
ease
이 다섯가지가 디폴트이다.
이러한 ease-in function의 차이를 명확하게 알수있는 사이트 
https://matthewlein.com/tools/ceaser

cubic-bezier 사용자가 직접 자신의 가속,감속을 만들수 있게 해줌
그러나 대부분 ease-in, ease-out, esae-in-out을 주로쓴다

복습 transition으로 모든요소에 애니메이션을 주고싶다면 all을 쓰면된다 
그러나 모두 적용하고 싶지않을때도 생길것 그럴때는 바꾸고싶은 요소를 적으면됨
background-color, border-radius 이런식으로 꼭 요소를 꼭 한개만 쓰지않아도 됨
중간에 ,를 넣어준다면 transition효과를 여러가지에 줄수가있다.

◆ 4.2 Transformations
Transformations는 한 요사를 변형 시키는 기능을 한다.
style 바꾸고 싶은 요소에 transform: 을 쓰면 됨
팀: border-radius: 50%; 하면 border가 원이 된다.

transform: rotateY(85deg);
Y축으로 (3D)회전 85deg면 85도 회전 90도면 일자이기떄문에 안보임

rotate뿐만 아니라 다양한 트랜스폼이 있음 rotateX, rotataZ 한번에 써서 회전을 줄수도 있음
scaleX scaleY 값도 줄수있음 괄호안 숫자는 숫자의 배수 
scale (2, 3) 이렇게 묶어서 써줄수도 있음 앞부터 X,Y,Z rotate도 마찬가지로 묶을 수있음
translateX,Y로 위치를 이동 시킬수있음 괄호안에 px을 입력해서,,
skew(deg) 는 비스듬히 기울이기
그 외에도 여러가지 transform이 있으므로 필요할때 mdn에서 찾아보고 복사해서 사용하자

알아 둘점!
한 요소를 transform 시킨다했을때 다른 요소는 변형되지않음
내가 딱 지정한 요소만 변형됨, 그리고 box element도 변형시키지않음 (margin이나 padding 등등)
단지 한가지의 픽셀만을 변형시키는 것이므로 전체 box에 영향을 주지않는다.
따라서 이동등을 하다가 다른요소와 겹쳐 보일수도 있다는 점!

transform을 지금까지 배웠던 state나 transition을 함께써서
버튼위에 올리면 회전하는식의 애니메이션도 만들수있다 

CSS발전으로 이제 CSS를 이용해 3D 애니메이션도 만들수있다

◆ 4.3 Animations part One

Animations 만드는 방법

style 창에 

@keyframes 애니메이션Name {
from {
	transform: rotateY(0);
}
to {
	transform: rotateY(360deg);
}

이렇게 from과 to를 써서 애니메이션 시킬 범위를 정해준다 (~에서 ~까지)
그리고 애니메이션을 적용시킬 엘리먼트에 animation Property를 입력시켜줘야됨

img(적용시킬 대상) {
animation: 애니메이션Name 5s ease-in-out infinite; 이런식으로
}

animation은 state와 다르게 마우스를 올리거나 클릭등을 하지않아도 자동적으로 동작함
infinite를 쓰면 무한반복재생 

from to 대신에
0% 50% 100% 이런식으로 범위를 정해줄수도있음
이렇게 3단계로 해주면 왔다갔다 동작했다가 다시 제자리로 돌아가는 애니메이션을 줄수있다.
단계는 내가 원하는 만큼 만들수있다 꼭 3단계가 아닌 5단계 7단계 ......
단계가 2단계일때는 from과 to를 써주면 쉽게 만들수있다. 

property는 꼭 transform이 아니어도 된다. 니꼬의 추천사항
border-radius나 border-color , opacity 등등

그런데 종종 animation이 적용안되는 property도 있기도 하고 실제로 유용하게 쓰는 transform을 권장한다.
animista 사이트 가면 다양한 transform 애니메이션 샘플과 코드를 볼수있다. 


◆ 4.4 Media Queries

Media Queries는 오직 CSS만 이용해서 스크린의 사이즈를 알 수 있는 방법

@media screen and (max-width: 600px) {
   div {
           background-color: tomato;
            }
        }
이 스크린 너비가 600px보다 작으면 박스 배경색이 토마토색으로 바뀐다.

이걸 응용해서 화면 크기에 따른 웹페이지 마다 스크린 크기를 바꿔줄 수 있다. (스마트폰, 태블릿 등등)


min-width와 max-width도 같이 쓸수있음

@media screen and (min-width: 600px) and (max-width: 750px)
div {
           background-color: tomato;
            }
        }
너비가 600px~750px 사이에만 박스가 토마토색이 된다.


 @media를 복사로 여러개를 만들어서 각자의 영역을 잡아줄수도 있다

 @media screen and (max-width: 600px) {
            div {
                background-color: tomato;
            }
        }
        @media screen and (min-width: 601px) and (max-width: 1200px) {
            div { 
                background-color: wheat;
            }
        }
        @media screen and (min-width:1201px) {
            div { 
                background-color: turquoise;
            }
        }
대신 맨밑에 미디어쿼리 코드가 가장 넓은 범위로 줘야함 CSS의 특성 가장 밑에 코드가 적용되므로
맽 밑에 범위가 가장 좁다면 위에 다른 코드가 적용이 안된다.

크롬 브라우저 우클릭 > 검사 > 검사 창 상단 스마트폰 이모티콘에서 여러가지 스마트폰 기종별 스크린을 테스트 해볼수있다.
가로모드 세로모드 일때도 볼수있음

@media screen and (orientation: landscape)
가로모드 일때를 뜻함(orientation: landscape) 를 붙이면 스마트폰이 세로모드일때는 적용이 안됨 무조건 가로모드일때 동작
(이 웹사이트를 보려면 가로로 설정해주세요 등의 웹페이지가 이런 간단한 CSS만으로 만들수 있는것)
세로는 (orientation: portrait)

이런식으로 반응형 웹사이트를 만들 수 있다.

미디어쿼리는 오직 핸드폰에서만 적용된다. 데스크탑 브라우저는 인식을 못함

미디어쿼리 또한 구글에서 css midia queries mdn을 검색하면 모든 사용방법과 예시가 나옴

media 타입은 보통 2가지를 많이쓰는데
하나는 위에 배웠던 @media screen, 또 다른 하나는 @media print
@media print는 내가 스크린을 프린트하고 싶을때 쓰는 것
내가 인쇄를 하고싶을때 인쇄에서는 어떻게 보여지는지 정하는 것

잉크를 아끼기 위해서 기존 웹페이지 구조보다 간결하게 한다던지? 아니면
인쇄때는 디자인을 따로 주고싶은 경우에 쓰는 듯하다.